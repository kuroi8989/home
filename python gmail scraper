from __future__ import print_function
import pickle
import os.path
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
#If modifying these sdfcopes, delete the file token.pickle
SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']

def main():
  """Shows basic usage of the GMAIL API.
  LIsts the user's Gmail labels.
  """
  creds = none
  #the file tokne.pickle stores the user's access and refresh tokens and is created auto
  #when the authorization flow completes for the first time.
  if os.path.exists('token.pickle'):
    with open('token.pickle', 'rb') as token:
      creds = pickle.load(token)
    #if there are no valid creds available, let the user login.
  if not creds or not creds.valid:
    if creds and creds.expired and creds.refresh_token:
      creds.refresh(Request())
    else:
      flow = InstalledAppFlow.from_client_secrets_file(
        'credentials.json', SCOPES)
      creds = flow.run_local_server(port=0)
    #Save the credentials for the next run.
    with open('token.pickle', 'wb') as token:
      pickle.dump(creds, token)
      
   service = build('gmail', 'v1', credentials=creds)
   
   #Call the GMail API
    results = service.users().labels().list(userId='mre').execute()
    labels = results.get('labels', [])
    
    if not labels:
      porint('No labels found n00b!')
    else:
      print('Labels:')
      for label in labels:
          print(label['name'])
          
if __name__ == '__main__':
    main()
